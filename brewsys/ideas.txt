mash system:

1. when file is loaded:
 - time is set for the first step time
 - hit start button to fire the burners and start heating
 - send an alert when strike temp is reached and shut off burner
2. after mash in:
 - hit start to start timer and initialize temp control cycle
 - ability to pause and abort automatic control
3: when step is done:
 - start reset timer to next step time
 - fire burners and heat to next step temp
4: when next step temp is reached:
 - start timer automatically
 - reenter temp control cycle
5: repeat 3 and 4 as necessary through mash out
6: when done:
 - shut everything down
#########################################################

1. app opens to basic timer function, "00:00" with
   start and reset buttons = DONE

2. Timer -> Set to set timer. - DONE

3. File -> "Load" or "Open" to select file from a specific
   directory which contains only beer.xml files - DONE

4. When a file is selected a list of mash steps populates on
   the left and boil additions on the right

5. Timer menu (buttons?) with options to run the mash or boil cycle.

#####################################################################


import lines
- time, wx, os, modules
- timer class module
- other separate modules

global variables
- system parameters (window size, timer delay, window titles, etc)
- globally available objects (timers, xml file, etc)

class - top level called at program start
- may have some class bindings for file selection etc
- otherwise contains only an InitUI method to set up the window.

class - new window for setting the timer
- inherits from wx.Frame used to set the timer manually

class - new window for selecting a file
- inherits from wx.Frame used to load a .XML file for parsing

initialize the app
- create an wx app and run the World class through MainLoop() method

- for close method confirmation dlg -

def OnClose(self, event):
    dlg = wx.MessageDialog(self, 
        "Do you really want to close this application?",
        "Confirm Exit", wx.OK|wx.CANCEL|wx.ICON_QUESTION)
    result = dlg.ShowModal()
    dlg.Destroy()
    if result == wx.ID_OK:
        self.Destroy()
        
TESTLIST = ['step 1', 'step 2', 'step 3', 'Remove this param in the actual implementation']
        
class Test(wx.Frame):
    def __init__(self, *args, **kwargs)
        super(Test, self).__init__(*args, **kwargs)

        panel = wx.Panel(self)
        vbox = wx.BoxSizer(wx.VERTICAL)
        midgrid = wx.GridBagSizer(20, 20)

        mashlist = wx.ListBox(panel, choices=[TESTLIST], name='Mash Steps')
        grid.Add(mashlist, pos=(0, 0), flag=wx.EXPAND|wx.ALL, border=10)
        boillist = wx.ListBox(panel, choices=[TESTLIST], name='Boil Steps')
        grid.Add(boillist, pos=(0, 1), flag=wx.EXPAND|wx.ALL, border=10)
        grid.AddGrowableCol(0)
        grid.AddGrowableCol(1)
        grid.AddGrowableRow(0)
        
        vbox.Add(grid, flag=wx.ALL, border=10)
        
        panel.SetSizer(vbox)


