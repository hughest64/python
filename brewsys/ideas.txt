mash system:

1. when file is loaded:
 - time is set for the first step time
 - hit start button to fire the burners and start heating
 - send an alert when strike temp is reached and shut off burner
2. after mash in:
 - hit start to start timer and initialize temp control cycle
 - ability to pause and abort automatic control
3: when step is done:
 - start reset timer to next step time
 - fire burners and heat to next step temp
4: when next step temp is reached:
 - start timer automatically
 - reenter temp control cycle
5: repeat 3 and 4 as necessary through mash out
6: when done:
 - shut everything down
#########################################################

1. app opens to basic timer function, "00:00" with
   start and reset buttons = DONE

2. Timer -> Set to set timer. - DONE

3. File -> "Load" or "Open" to select file from a specific
   directory which contains only beer.xml files - DONE

4. When a file is selected a list of mash steps populates on
   the left and boil additions on the right

5. Timer menu (buttons?) with options to run the mash or boil cycle.

#####################################################################


import lines
- time, wx, os, modules
- timer class module
- other separate modules

global variables
- system parameters (window size, timer delay, window titles, etc)
- globally available objects (timers, xml file, etc)

class - top level called at program start
- may have some class bindings for file selection etc
- otherwise contains only an InitUI method to set up the window.

class - new window for setting the timer
- inherits from wx.Frame used to set the timer manually

class - new window for selecting a file
- inherits from wx.Frame used to load a .XML file for parsing

initialize the app
- create an wx app and run the World class through MainLoop() method

- for close method confirmation dlg -

def OnClose(self, event):
    dlg = wx.MessageDialog(self, 
        "Do you really want to close this application?",
        "Confirm Exit", wx.OK|wx.CANCEL|wx.ICON_QUESTION)
    result = dlg.ShowModal()
    dlg.Destroy()
    if result == wx.ID_OK:
        self.Destroy()
        
def BrewType(self, e):
        """ load a timer based upon the brewing style """
        try:
            self.XML = self.recipe.GetRecipe()
            self.TREE = ET.parse(self.XML)
            self.TIMER.GetXML(self.TREE)
            self.brewType = self.TIMER.GetBrewType()
            self.mashSteps = self.TIMER.GetMashSteps()[:]
            self.steps = len(self.mashsteps)               # the total number of mash steps
            if self.Mashable:
               self.CallMash(None)
            else:
               self.CallBoil(None)

        except:
            # may need to raise parse error dialog if fpath is bad!!!
            self.RecipeErrDlg()

    def CallMash(self, e):
        self.step_count = 0                            # this needs to be in the init
                        
        try:
            if self.steps > 0 and self.step_count < self.steps:
                self.mashFlag = True                   # deprecate
                step = self.mashSteps.pop(0)           # instead of this use:
                
                step = self.mashSteps[self.step_count-1] # this instead
                self.TIMER.Set(step[1], 0)             # with the new timer set method you should be able to set with (step[1])
                self.step_count += 1                   # move to the next step in the list
                self.OnRefresh(None)
            else:
                self.CallBoil(None)
                self.mashFlag = False                  # deprecate
        except:
            # use ParseErrDlg(self) instead of:
            self.RecipeErrDlg()

    def CallBoil(self, e):
        self.mashFlag = False                          # deprecate
        try:
            boil = self.TIMER.GetBoilTime()
            self.TIMER.Set(boil[0], boil[1])           # with the new timer set method you should be able to set with (boil[0])
            # refresh the display
            self.OnRefresh(None)

        except:
            # a messag dialong would nice here !!!
            self.RecipeErrDlg()

    def Mashable(self):
        # should partial mash and biab be included? !!!
        """ Returns True if the brew type is All Grain. """
        return self.brewType == 'All Grain'
        
    # change to ParseErrDlg(self) and use in except for BrewType() method 
    def OnParseErr(self):                          
        """ This will need a pop up dialog!!! """
        return "The file path is incorrect"
        
   ################################################################
   # when double clicking a step in mash_list:
   
   def OnMashListDC(self, e):
       # set self.step_count to the appropriate index from choices list
       sel = <mash list box>.GetSelection() # I think this is a string, not the index!!!
       self.step_count = sel
       # call callMash() method
       self.CallMash(None)
   
   # add event binding for double click event and this method
   
   # next method to to bind to a "Next" button to skip to the next step
   # same for previous?
